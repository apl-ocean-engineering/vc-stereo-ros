#!/usr/bin/python3

import rospy
import cv2
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image


class VcStereoPublisher:

    def __init__(self):

        self.left_image_pub = rospy.Publisher("left/image_raw", Image, queue_size=10)
        self.right_image_pub = rospy.Publisher("right/image_raw", Image, queue_size=10)

        self.bridge = CvBridge()

        # This is fixed for these cameras
        self.image_size = (1080,1440)
        framerate = 10

        # GStreamer string, may be possible to optimize this further?
        gst_string = '''
nvarguscamerasrc sensor-id=0 wbmode=0 aelock=true ispdigitalgainrange=\"1 8\" gainrange=\"1 48\" name=left
nvarguscamerasrc sensor-id=1 wbmode=0 aelock=true ispdigitalgainrange=\"1 8\" gainrange=\"1 48\" name=right
glstereomix name=mix
left. ! video/x-raw(memory:NVMM),width={image_size[1]},height={image_size[0]},framerate={framerate}/1 ! nvvidconv ! video/x-raw ! glupload ! mix.
right. ! video/x-raw(memory:NVMM),width={image_size[1]},height={image_size[0]},framerate={framerate}/1 ! nvvidconv ! video/x-raw ! glupload ! mix.
mix. ! video/x-raw(memory:GLMemory),multiview-mode=side-by-side ! glcolorconvert ! gldownload !
        queue ! video/x-raw,format=BGRx ! videoconvert ! video/x-raw,format=BGR ! appsink'
    '''

        gst_string = gst_string.format(image_size=self.image_size, framerate=framerate)
        rospy.loginfo(f"Running gstreamer: {gst_string}")

        # Open OpenCV camera
        self.stereo = cv2.VideoCapture(gst_string, cv2.CAP_GSTREAMER )

        if self.stereo.isOpened() is False:
            rospy.logfatal("Could not open camera")
            exit()


    def run(self):
        """Capture frames from a camera and publish it to the topic /image_raw
        """

        while not rospy.is_shutdown():
            # Capture a frame

            success, composite = self.stereo.read()

            if success is False:
                rospy.logwarn("no image")
                continue


            left_img = composite[0:self.image_size[0], 0:self.image_size[1],:]
            right_img = composite[0:self.image_size[0], self.image_size[1]:(2*self.image_size[1]),:]

            try:
                img_msg = self.bridge.cv2_to_imgmsg(left_img, "bgr8")
                self.left_image_pub.publish(img_msg)
            except CvBridgeError as error:
                rospy.logwarn(error)

            try:
                img_msg = self.bridge.cv2_to_imgmsg(right_img, "bgr8")
                self.right_image_pub.publish(img_msg)
            except CvBridgeError as error:
                rospy.logwarn(error)




if __name__=="__main__":
    rospy.init_node("vc_stereo_node")

    pub = VcStereoPublisher()

    try:
        pub.run()
    except KeyboardInterrupt:
        rospy.loginfo("Shutting down!")
