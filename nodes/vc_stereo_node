#!/usr/bin/env python3

import rospy
import cv2
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image, CameraInfo
from camera_info_manager import CameraInfoManager


class VcStereoPublisher:
    def __init__(self):

        try:
            left_calib_url = rospy.get_param("~left_camera_info")

            rospy.loginfo(f"Loading left calibration: {left_calib_url}")

            self.left_cam_mgr = CameraInfoManager(
                "left", url=left_calib_url, namespace="left"
            )
            self.left_cam_mgr.loadCameraInfo()
        except KeyError:
            rospy.logwarn(
                'ROS param "left_camera_info" is not defined, not publishing camera calibration'
            )
            self.left_cam_mgr = None

        try:
            right_calib_url = rospy.get_param("~right_camera_info")

            rospy.loginfo(f"Loading right calibration: {right_calib_url}")

            self.right_cam_mgr = CameraInfoManager(
                "right", url=right_calib_url, namespace="right"
            )
            self.right_cam_mgr.loadCameraInfo()

        except KeyError:
            rospy.logwarn(
                'ROS param "right_camera_info" is not defined, not publishing camera calibration'
            )
            self.right_cam_mgr = None

        self.left_image_pub = rospy.Publisher("left/image_raw", Image, queue_size=10)
        self.right_image_pub = rospy.Publisher("right/image_raw", Image, queue_size=10)
        self.bridge = CvBridge()

        self.left_info_pub = rospy.Publisher(
            "left/camera_info", CameraInfo, queue_size=10
        )
        self.right_info_pub = rospy.Publisher(
            "right/camera_info", CameraInfo, queue_size=10
        )

        # This is fixed for these cameras
        self.image_size = (1080, 1440)
        framerate = 10

        # GStreamer string, may be possible to optimize this further?
        gst_string = """
nvarguscamerasrc sensor-id=0 wbmode=0 aelock=true ispdigitalgainrange=\"1 8\" gainrange=\"1 48\" name=left
nvarguscamerasrc sensor-id=1 wbmode=0 aelock=true ispdigitalgainrange=\"1 8\" gainrange=\"1 48\" name=right
glstereomix name=mix
left. ! video/x-raw(memory:NVMM),width={image_size[1]},height={image_size[0]},framerate={framerate}/1 ! nvvidconv ! video/x-raw ! glupload ! mix.
right. ! video/x-raw(memory:NVMM),width={image_size[1]},height={image_size[0]},framerate={framerate}/1 ! nvvidconv ! video/x-raw ! glupload ! mix.
mix. ! video/x-raw(memory:GLMemory),multiview-mode=side-by-side ! glcolorconvert ! gldownload !
        queue ! video/x-raw,format=BGRx ! videoconvert ! video/x-raw,format=BGR ! appsink'
    """

        gst_string = gst_string.format(image_size=self.image_size, framerate=framerate)
        rospy.loginfo(f"Running gstreamer: {gst_string}")

        # Open OpenCV camera
        self.stereo = cv2.VideoCapture(gst_string, cv2.CAP_GSTREAMER)

        if self.stereo.isOpened() is False:
            rospy.logfatal("Could not open camera")
            exit()

    def run(self):
        """Capture frames from a camera and publish it to the topic /image_raw"""

        while not rospy.is_shutdown():
            # Capture a frame

            success, composite = self.stereo.read()

            frame_time = rospy.Time.now()

            if success is False:
                rospy.logwarn("no image")
                continue

            left_img = composite[0 : self.image_size[0], 0 : self.image_size[1], :]
            right_img = composite[
                0 : self.image_size[0], self.image_size[1] : (2 * self.image_size[1]), :
            ]

            try:
                img_msg = self.bridge.cv2_to_imgmsg(left_img, "bgr8")
                img_msg.header.frame_id = "left"
                img_msg.header.stamp = frame_time

                self.left_image_pub.publish(img_msg)
            except CvBridgeError as error:
                rospy.logwarn(error)

            try:
                img_msg = self.bridge.cv2_to_imgmsg(right_img, "bgr8")
                img_msg.header.frame_id = "right"
                img_msg.header.stamp = frame_time

                self.right_image_pub.publish(img_msg)
            except CvBridgeError as error:
                rospy.logwarn(error)

            if self.left_cam_mgr is not None:
                left_info = self.left_cam_mgr.getCameraInfo()
                left_info.header.frame_id = "left"
                left_info.header.stamp = frame_time
                self.left_info_pub.publish(left_info)

            if self.right_cam_mgr is not None:
                right_info = self.right_cam_mgr.getCameraInfo()
                right_info.header.frame_id = "right"
                right_info.header.stamp = frame_time
                self.right_info_pub.publish(right_info)


if __name__ == "__main__":
    rospy.init_node("vc_stereo_node")

    pub = VcStereoPublisher()

    try:
        pub.run()
    except KeyboardInterrupt:
        rospy.loginfo("Shutting down!")
